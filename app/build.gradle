plugins {
    alias libs.plugins.android.application
    alias libs.plugins.hilt.android
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.kapt
    id 'jacoco'
}

android {
    compileSdk 34
    namespace 'net.rafaeltoledo.code'

    defaultConfig {
        applicationId 'net.rafaeltoledo.code'
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName '1.0.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        final sharedTestDir = 'src/sharedTest/kotlin'
        final sharedResourcesDir = 'src/sharedTest/json'
        test.java.srcDirs += sharedTestDir
        test.resources.srcDir(sharedResourcesDir)
        androidTest.java.srcDirs += sharedTestDir
        androidTest.assets.srcDirs += sharedResourcesDir
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests.includeAndroidResources true
    }
}

kotlin {
    jvmToolchain 17
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation libs.kotlinx.coroutines.android

    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.androidx.fragment
    implementation libs.androidx.activity
    implementation libs.androidx.lifecycle.livedata
    implementation libs.androidx.lifecycle.viewmodel
    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui
    implementation libs.androidx.recyclerview

    implementation libs.google.material

    implementation libs.hilt.android
    kapt libs.hilt.android.compiler

    implementation libs.square.okhttp
    implementation libs.square.okhttp.logging
    implementation libs.square.retrofit
    implementation libs.square.retrofit.moshi
    implementation libs.square.moshi

    debugImplementation libs.androidx.fragment.testing.manifest

    testImplementation libs.androidx.fragment.testing
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.rules
    testImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.junit
    testImplementation libs.androidx.test.truth
    testImplementation libs.androidx.test.espresso.core
    testImplementation libs.androidx.test.espresso.contrib
    testImplementation libs.androidx.test.espresso.intents
    testImplementation libs.square.okhttp.mockwebserver
    testImplementation libs.robolectric.annotations
    testImplementation libs.hilt.android.testing

    testImplementation libs.robolectric
    testImplementation libs.mockito.kotlin
    testImplementation libs.androidx.arch.core.testing
    testImplementation libs.kotlinx.coroutines.test
    kaptTest libs.hilt.android.compiler

    androidTestUtil libs.androidx.test.orchestrator
    kaptAndroidTest libs.hilt.android.compiler
}

def classes = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: ['**/*inlined*.*', '**/*JsonAdapter.*', '**/HiltTestActivity.*'])
def sources = files("$projectDir/src/main/java", "$buildDir/generated/source/kapt/debug/net.rafaeltoledo.code")
def report = "$buildDir/reports/jacoco/report.xml"

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task createCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    sourceDirectories.setFrom(sources)
    classDirectories.setFrom(files(classes))
    executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec']))

    reports {
        xml.required.set(true)
        xml.destination file(report)
        html.required.set(true)
    }
}