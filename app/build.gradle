apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'jacoco'

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    defaultConfig {
        applicationId 'net.rafaeltoledo.code'
        minSdkVersion 19
        targetSdkVersion 31
        versionCode 1
        versionName '1.0.0'

        testInstrumentationRunner 'net.rafaeltoledo.code.TestRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures.viewBinding true

    buildTypes {
        debug {
            multiDexEnabled true
        }

        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        final sharedTestDir = 'src/sharedTest/java'
        final sharedResourcesDir = 'src/sharedTest/json'
        test.java.srcDirs += sharedTestDir
        test.resources.srcDir(sharedResourcesDir)
        androidTest.java.srcDirs += sharedTestDir
        androidTest.assets.srcDirs += sharedResourcesDir
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests.includeAndroidResources true
    }
}

kapt {
    correctErrorTypes true
}

def bothTestImplementation(String dependency) {
    project.dependencies.add('testImplementation', dependency)
    project.dependencies.add('androidTestImplementation', dependency)
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    implementation "androidx.core:core-ktx:$versions.core"
    implementation "androidx.appcompat:appcompat:$versions.appcompat"
    implementation "androidx.fragment:fragment-ktx:$versions.fragment"
    implementation "androidx.activity:activity-ktx:$versions.activity"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    implementation "androidx.recyclerview:recyclerview:$versions.recyclerview"
    implementation "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$versions.navigation"

    implementation "com.google.android.material:material:$versions.material"

    implementation "com.google.dagger:hilt-android:$versions.dagger"
    kapt "com.google.dagger:hilt-android-compiler:$versions.dagger"

    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-moshi:$versions.retrofit"
    implementation "com.squareup.moshi:moshi:$versions.moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$versions.moshi"
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    implementation "com.github.bumptech.glide:glide:$versions.glide"
    kapt "com.github.bumptech.glide:compiler:$versions.glide"

    debugImplementation "androidx.fragment:fragment-testing:$versions.fragment"

    bothTestImplementation 'androidx.test:core-ktx:1.4.1-alpha03'
    bothTestImplementation 'androidx.test.ext:junit-ktx:1.1.4-alpha03'
    bothTestImplementation 'androidx.test.ext:truth:1.5.0-alpha03'
    bothTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    bothTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"
    bothTestImplementation "androidx.test.espresso:espresso-contrib:$versions.espresso"
    bothTestImplementation "androidx.test.espresso:espresso-intents:$versions.espresso"
    bothTestImplementation 'androidx.test:runner:1.4.1-alpha03'
    bothTestImplementation 'androidx.test:rules:1.4.1-alpha03'
    bothTestImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
    bothTestImplementation "org.robolectric:annotations:$versions.robolectric"
    bothTestImplementation "com.google.dagger:hilt-android-testing:$versions.dagger"

    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    testImplementation 'io.mockk:mockk:1.12.1'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
    kaptTest "com.google.dagger:hilt-android-compiler:$versions.dagger"

    androidTestImplementation 'com.github.tmurakami:dexopener:2.0.5'
    androidTestUtil 'androidx.test:orchestrator:1.4.1-rc01'
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$versions.dagger"
}

def classes = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: ['**/*inlined*.*', '**/*JsonAdapter.*', '**/HiltTestActivity.*'])
def sources = files("$projectDir/src/main/java", "$buildDir/generated/source/kapt/debug/net.rafaeltoledo.code")
def report = "$buildDir/reports/jacoco/report.xml"

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task createCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    sourceDirectories.setFrom(sources)
    classDirectories.setFrom(files(classes))
    executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec']))

    reports {
        xml.required.set(true)
        xml.destination file(report)
        html.required.set(true)
    }
}