plugins {
    alias libs.plugins.android.application
    alias libs.plugins.hilt.android
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.kapt
    id 'jacoco'
}

android {
    compileSdk 33
    namespace 'net.rafaeltoledo.code'

    defaultConfig {
        applicationId 'net.rafaeltoledo.code'
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName '1.0.0'

        testInstrumentationRunner 'net.rafaeltoledo.code.TestRunner'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    buildTypes {
        debug {
            multiDexEnabled true
        }

        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        final sharedTestDir = 'src/sharedTest/java'
        final sharedResourcesDir = 'src/sharedTest/json'
        test.java.srcDirs += sharedTestDir
        test.resources.srcDir(sharedResourcesDir)
        androidTest.java.srcDirs += sharedTestDir
        androidTest.assets.srcDirs += sharedResourcesDir
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests.includeAndroidResources true
    }
}

kapt {
    correctErrorTypes true
}

def bothTestImplementation(String dependency) {
    project.dependencies.add('testImplementation', dependency)
    project.dependencies.add('androidTestImplementation', dependency)
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.versions.kotlinx.coroutines.get()}"

    implementation "androidx.core:core-ktx:${libs.versions.androidx.core.get()}"
    implementation "androidx.appcompat:appcompat:${libs.versions.androidx.appcompat.get()}"
    implementation "androidx.fragment:fragment-ktx:${libs.versions.androidx.fragment.get()}"
    implementation "androidx.activity:activity-ktx:${libs.versions.androidx.activity.get()}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${libs.versions.androidx.lifecycle.get()}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${libs.versions.androidx.lifecycle.get()}"
    implementation "androidx.recyclerview:recyclerview:${libs.versions.androidx.recyclerview.get()}"
    implementation "androidx.navigation:navigation-fragment-ktx:${libs.versions.androidx.navigation.get()}"
    implementation "androidx.navigation:navigation-ui-ktx:${libs.versions.androidx.navigation.get()}"

    implementation "com.google.android.material:material:${libs.versions.material.get()}"

    implementation "com.google.dagger:hilt-android:${libs.versions.dagger.get()}"
    kapt "com.google.dagger:hilt-android-compiler:${libs.versions.dagger.get()}"

    implementation "com.squareup.retrofit2:retrofit:${libs.versions.retrofit.get()}"
    implementation "com.squareup.retrofit2:converter-moshi:${libs.versions.retrofit.get()}"
    implementation "com.squareup.moshi:moshi:${libs.versions.moshi.get()}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${libs.versions.moshi.get()}"
    implementation "com.squareup.okhttp3:okhttp:${libs.versions.okhttp.get()}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libs.versions.okhttp.get()}"

    debugImplementation "androidx.fragment:fragment-testing:${libs.versions.androidx.fragment.get()}"

    bothTestImplementation 'androidx.test:core-ktx:1.5.0-alpha02'
    bothTestImplementation 'androidx.test.ext:junit-ktx:1.1.4-alpha07'
    bothTestImplementation 'androidx.test.ext:truth:1.5.0-alpha07'
    bothTestImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'
    bothTestImplementation "androidx.test.espresso:espresso-core:${libs.versions.androidx.espresso.get()}"
    bothTestImplementation "androidx.test.espresso:espresso-contrib:${libs.versions.androidx.espresso.get()}"
    bothTestImplementation "androidx.test.espresso:espresso-intents:${libs.versions.androidx.espresso.get()}"
    bothTestImplementation 'androidx.test:runner:1.5.0-alpha04'
    bothTestImplementation 'androidx.test:rules:1.4.1-alpha07'
    bothTestImplementation "com.squareup.okhttp3:mockwebserver:${libs.versions.okhttp.get()}"
    bothTestImplementation "org.robolectric:annotations:${libs.versions.robolectric.get()}"
    bothTestImplementation "com.google.dagger:hilt-android-testing:${libs.versions.dagger.get()}"

    testImplementation "org.robolectric:robolectric:${libs.versions.robolectric.get()}"
    testImplementation 'io.mockk:mockk:1.12.8'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${libs.versions.kotlinx.coroutines.get()}"
    kaptTest "com.google.dagger:hilt-android-compiler:${libs.versions.dagger.get()}"

    androidTestImplementation 'com.github.tmurakami:dexopener:2.0.5'
    androidTestUtil 'androidx.test:orchestrator:1.4.2-alpha04'
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:${libs.versions.dagger.get()}"
}

def classes = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: ['**/*inlined*.*', '**/*JsonAdapter.*', '**/HiltTestActivity.*'])
def sources = files("$projectDir/src/main/java", "$buildDir/generated/source/kapt/debug/net.rafaeltoledo.code")
def report = "$buildDir/reports/jacoco/report.xml"

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
}

task createCoverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {

    sourceDirectories.setFrom(sources)
    classDirectories.setFrom(files(classes))
    executionData.setFrom(fileTree(dir: buildDir, includes: ['jacoco/testDebugUnitTest.exec']))

    reports {
        xml.required.set(true)
        xml.destination file(report)
        html.required.set(true)
    }
}